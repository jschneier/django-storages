# NOTE: You have to use single-quoted strings in TOML for regular expressions.
# It's the equivalent of r-strings in Python.  Multiline strings are treated as
# verbose regular expressions by Black.  Use [ ] to denote a significant space
# character.

[build-system]
build-backend = "setuptools.build_meta"
requires = [
  "setuptools>=61.2",
]

[project]
name = "django-storages"
description = "Support for many storage backends in Django"
license = {text = "BSD-3-Clause"}
authors = [{name = "Josh Schneier", email = "josh.schneier@gmail.com"}]
requires-python = ">=3.7"
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Environment :: Web Environment",
  "Framework :: Django",
  "Framework :: Django :: 3.2",
  "Framework :: Django :: 4.1",
  "Framework :: Django :: 4.2",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: BSD License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
]
dynamic = [
  "readme",
  "version",
]
dependencies = [
  "Django>=3.2",
]
[project.optional-dependencies]
azure = [
  "azure-storage-blob>=12",
]
boto3 = [
  "boto3>=1.4.4",
]
dropbox = [
  "dropbox>=7.2.1",
]
google = [
  "google-cloud-storage>=1.27",
]
libcloud = [
  "apache-libcloud",
]
s3 = [
  "boto3>=1.4.4",
]
sftp = [
  "paramiko>=1.15",
]
[project.urls]
Homepage = "https://github.com/jschneier/django-storages"

[tool.setuptools]
zip-safe = false
packages = [
    "storages",
    "storages.backends",
]
include-package-data = false

[tool.setuptools.dynamic]
readme = {file = ["README.rst", "CHANGELOG.rst"]}
version = {attr = "storages.__version__"}

[tool.ruff]
select = [
  "AIR",    # Airflow
  "ASYNC",  # flake8-async
  "B",      # flake8-bugbear
  "C4",     # flake8-comprehensions
  "C90",    # McCabe cyclomatic complexity
  "CPY",    # flake8-copyright
  "DJ",     # flake8-django
  "E",      # pycodestyle
  "EXE",    # flake8-executable
  "F",      # Pyflakes
  "FLY",    # flynt
  "FURB",   # refurb
  "G",      # flake8-logging-format
  "I",      # isort
  "ICN",    # flake8-import-conventions
  "INP",    # flake8-no-pep420
  "INT",    # flake8-gettext
  "ISC",    # flake8-implicit-str-concat
  "NPY",    # NumPy-specific rules
  "PD",     # pandas-vet
  "PERF",   # Perflint
  "PGH",    # pygrep-hooks
  "PIE",    # flake8-pie
  "PL",     # Pylint
  "PYI",    # flake8-pyi
  "RUF",    # Ruff-specific rules
  "SLOT",   # flake8-slots
  "T10",    # flake8-debugger
  "T20",    # flake8-print
  "TCH",    # flake8-type-checking
  "TID",    # flake8-tidy-imports
  "W",      # pycodestyle
  "YTT",    # flake8-2020
  # "A",    # flake8-builtins
  # "ANN",  # flake8-annotations
  # "ARG",  # flake8-unused-arguments
  # "BLE",  # flake8-blind-except
  # "COM",  # flake8-commas
  # "D",    # pydocstyle
  # "DTZ",  # flake8-datetimez
  # "EM",   # flake8-errmsg
  # "ERA",  # eradicate
  # "FA",   # flake8-future-annotations
  # "FBT",  # flake8-boolean-trap
  # "FIX",  # flake8-fixme
  # "N",    # pep8-naming
  # "PT",   # flake8-pytest-style
  # "PTH",  # flake8-use-pathlib
  # "Q",    # flake8-quotes
  # "RET",  # flake8-return
  # "RSE",  # flake8-raise
  # "S",    # flake8-bandit
  # "SIM",  # flake8-simplify
  # "SLF",  # flake8-self
  # "TD",   # flake8-todos
  # "TRY",  # tryceratops
  # "UP",   # pyupgrade
]
ignore = [
  "B028",
  "B904",
  "PGH004",
 ]
target-version = "py37"

[tool.ruff.isort]
force-single-line = true
known-first-party = ["storages"]

[tool.ruff.per-file-ignores]
"docs/conf.py" = ["E402", "INP001"]
"storages/backends/ftp.py" = ["PERF203"]
"tests/test_s3.py" = ["B018"]

[tool.ruff.pylint]
allow-magic-value-types = ["int", "str"]
